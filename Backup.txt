
using System.Linq;

namespace ejercisiosBasicos
{
    class Program
    {
        static string[] arreglo = new string[10];
        static int[] arrayNum;
        static string historialMaquina = "";
        static double totalHistorialMaquina = 0;
        static int result = 0;//0.Neutral / 1.Player 1 wins / 2.Player 2 wins / 3.Imposible game
        static int resultValues = 2;

        static void Main(string[] args)
        {
            //-------ARREGLOS-------
            //#1.
            //rellenarArray();

            //mostrarArregloAlfa(arreglo);
            //Console.ReadLine();

            //#2.
            /*  int cantElement = 0, numA1 = 0, numA2 = 0;
              string contYN = "Y";

              do
              {
                  Console.WriteLine("Indique la cantidad de elementos del array");

                  if (int.TryParse(Console.ReadLine(), out cantElement))
                  {
                      arrayNum = new int[cantElement];

                      Console.WriteLine("Digite el primer numero,debe de estar entre 0 y 9");

                      if (int.TryParse(Console.ReadLine(), out numA1))
                      {
                          Console.WriteLine("Digite el segundo numero,debe de estar entre {0} y 9", numA1);

                          if (int.TryParse(Console.ReadLine(), out numA2))
                          {
                              if (rellenarArrayAleatoriamente(numA1, numA2))
                              {
                                  mostrarArregloNum(arrayNum);

                                  Console.WriteLine("");
                                  Console.WriteLine("La suma de los valores del arreglo es {0}", sumValArray());
                              }
                          }
                          else
                          {
                              Console.WriteLine("El numero debe de ser de tipo numerico entero");
                          }
                      }
                      else
                      {
                          Console.WriteLine("El valor debe de ser de tipo numerico entero");
                      }
                  }
                  else
                  {
                      Console.WriteLine("La cantidad de elementos debe de ser de tipo numerico y entero");
                  }

                  Console.WriteLine("Desea continuar con la ejecusion del sistema?(Y/N)");
                  contYN = Console.ReadLine();

                  while ((contYN.ToUpper() != "Y") && (contYN.ToUpper() != "N"))
                  {
                      Console.WriteLine("La opcion no es valida,Desea continuar con la ejecusion del sistema?(Y/N)");
                      contYN = Console.ReadLine();
                  }

              } while (contYN.ToUpper() == "Y");*/

            //#3.
            //Random rand = new Random();
            //int numElementos = 0, numRam = 0, divider = 0;
            //int[] arrayNum, arrayNumPrim = new int[] { 2, 3, 5, 7, 11 };
            //Boolean flag = false;
            //double quotient = 0;
            //string contYN = "Y";

            //do
            //{
            //    Console.WriteLine("Indique el numero de elementos del array");

            //    if (int.TryParse(Console.ReadLine(), out numElementos))
            //    {
            //        arrayNum = new int[numElementos];

            //        for (int i = 0; i <= arrayNum.Length - 1; i++)
            //        {
            //            flag = false;
            //            numRam = rand.Next(2, 100);

            //            for (int j = 0; j <= arrayNumPrim.Length - 1; j++)
            //            {
            //                divider = arrayNumPrim[j];

            //                quotient = (numRam % divider);

            //                if ((quotient != 0))
            //                {
            //                    if ((quotient < divider))
            //                    {
            //                        flag = true;
            //                    }
            //                }
            //                else if (quotient == 0)
            //                {
            //                    flag = false;
            //                    break;
            //                }
            //            }

            //            if (flag == true)
            //            {
            //                arrayNum[i] = numRam;
            //            }
            //            else if (flag == false)
            //            {
            //                i--;
            //            }
            //        }
            //        mostrarArregloNum(arrayNum);
            //    }
            //    else
            //    {
            //        Console.WriteLine("El valor debe de ser tipo numerico entero");
            //    }

            //    Console.WriteLine("Desea volver a ejecutar este programa?(Y/N)");
            //    contYN = Console.ReadLine();

            //    while ((contYN.ToUpper() != "Y") && (contYN.ToUpper() != "N"))
            //    {
            //        Console.WriteLine("La opcion digitada no es valida,desea continuar con la ejecusion de programa?(Y/N)");
            //        contYN = Console.ReadLine();
            //    }

            //} while (contYN.ToUpper() == "Y");


            //#4.
            //int[] array = new int[100];
            //int suma = 0, cont = 0;

            //for (int i = 1; i <= 100; i++)
            //{
            //    array[cont] = i;
            //    suma += array[cont];
            //    cont++;
            //}
            //Console.WriteLine("Los numeros del 1 al 100 es {0}", suma);
            //Console.WriteLine("El promedio es {0}", (suma / array.Length));
            //mostrarArregloNum(array);
            //Console.ReadLine();

            //#5.
            //string[] abecedario = new string[] { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "Ñ", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" };
            //string frase = "", contYN = "Y";
            //int posicion = 0;

            //do
            //{
            //    do
            //    {
            //        Console.WriteLine("Escriba un numero");

            //        if (int.TryParse(Console.ReadLine(), out posicion))
            //        {
            //            if (posicion != -1)
            //            {
            //                if (posicion <= (abecedario.Length - 1))
            //                {

            //                    frase += abecedario[posicion];
            //                }
            //                else
            //                {
            //                    Console.WriteLine("Error, inserte otro numero");
            //                }
            //            }
            //        }
            //        else
            //        {
            //            Console.WriteLine("El tipo de valor debe de ser de tipo numerico entero");
            //        }

            //    } while (posicion != -1);

            //    Console.WriteLine("La frase resultante es {0}", frase);
            //    Console.WriteLine("Desea continuar con la ejecusion de este programa?(Y/N)");
            //    contYN = Console.ReadLine();

            //    while (contYN.ToUpper() != "Y" && contYN.ToUpper() != "N")
            //    {
            //        Console.WriteLine("La opcion digitada no es valida,desea continuar con la ejecusion de programa(Y/N)?");
            //        contYN = Console.ReadLine();
            //    }

            //    frase = "";

            //} while (contYN.ToUpper() == "Y");


            //#6.
            //string frase = "", opcionYN = "Y";
            //char[] arrayCaracteres;

            //do
            //{
            //    Console.WriteLine("Digite una frase");
            //    frase = Console.ReadLine();

            //    if (!string.IsNullOrEmpty(frase))
            //    {
            //        arrayCaracteres = new char[frase.Length];

            //        for (int i = 0; i <= arrayCaracteres.Length - 1; i++)
            //        {
            //            arrayCaracteres[i] = frase[i];

            //            Console.WriteLine("Posicion {0} Elmento => {1}", i, arrayCaracteres[i]);
            //        }
            //    }
            //    else
            //    {
            //        Console.WriteLine("Es obligatorio digitar una frase");
            //    }

            //    Console.WriteLine("Desea continuar con la ejecusion del programa?(Y/N)");
            //    opcionYN = Console.ReadLine();

            //    while ((opcionYN.ToUpper() != "Y") && (opcionYN.ToUpper() != "N"))
            //    {
            //        Console.WriteLine("La opcion no es valida,desea contininuar con la ejecusion del programa?(Y/N)");
            //        opcionYN = Console.ReadLine();
            //    }

            //} while (opcionYN.ToUpper() == "Y");

            //#7
            //Random ram = new Random();
            //int longArray = 0, finDigNum = 0, contNewArray = 0, contArray2 = 0; ;
            //string[] arrayNumEntOrig, arrayEntFinDig;
            //string opcionYN = "", numAleat = "", ultDig = "";

            //do
            //{
            //    Console.WriteLine("Digite la longitud del array");

            //    if (int.TryParse(Console.ReadLine(), out longArray))
            //    {
            //        arrayNumEntOrig = new string[longArray];

            //        Console.WriteLine("Digite el numero en el cual terminan los numeros que quiere mostrar");

            //        if (int.TryParse(Console.ReadLine(), out finDigNum))
            //        {
            //            Console.WriteLine("");
            //            Console.WriteLine("ARREGLO ORIGINAL");
            //            Console.WriteLine("");

            //            for (int i = 0; i < arrayNumEntOrig.Length; i++)
            //            {
            //                numAleat = ram.Next(1, 300).ToString();

            //                arrayNumEntOrig[i] = numAleat;

            //                ultDig = numAleat[numAleat.Length - 1].ToString();

            //                if (ultDig == finDigNum.ToString())
            //                {
            //                    contNewArray++;
            //                }

            //                Console.WriteLine("Posicion {0} Elmento => {1}", i, arrayNumEntOrig[i]);
            //            }

            //            Console.WriteLine("");
            //            Console.WriteLine("ARREGLO DE NUMEROS TERMINADOS EN {0}", finDigNum);
            //            Console.WriteLine("");

            //            if (contNewArray > 0)
            //            {
            //                arrayEntFinDig = new string[contNewArray];

            //                for (int i = 0; i <= arrayNumEntOrig.Length - 1; i++)
            //                {
            //                    ultDig = arrayNumEntOrig[i].ToString()[arrayNumEntOrig[i].ToString().Length - 1].ToString();

            //                    if (ultDig == finDigNum.ToString())
            //                    {
            //                        arrayEntFinDig[contArray2] = arrayNumEntOrig[i];

            //                        Console.WriteLine("Posicion {0} Elmento => {1}", contArray2, arrayEntFinDig[contArray2]);

            //                        contArray2++;
            //                    }
            //                    else
            //                    {
            //                        if (contArray2 != 0)
            //                        {
            //                            contArray2--;
            //                        }
            //                    }
            //                }
            //            }
            //            else
            //            {
            //                Console.WriteLine("El arreglo anterior no existen numeros terminados en {0}", finDigNum.ToString());
            //            }
            //        }
            //        else
            //        {

            //            Console.WriteLine("El valor digitado debe de ser de tipo entero");
            //        }
            //    }
            //    else
            //    {
            //        Console.WriteLine("El valor debe de ser de tipo numerico entero");
            //    }

            //    Console.WriteLine("Desea continuar con la ejecusion del programa?(Y/N)");
            //    opcionYN = Console.ReadLine();

            //    while ((opcionYN.ToUpper() != "Y") && (opcionYN.ToUpper() != "N"))
            //    {
            //        Console.WriteLine("La opcion no es valida,desea continuar con la ejecusion del programa?(Y/N)");
            //        opcionYN = Console.ReadLine();
            //    }


            //} while (opcionYN.ToUpper() == "Y");

            //#8.
            //string[] dniVocab = new string[] { "T", "R", "W", "A", "G", "M", "Y", "F", "P", "D", "X", "B", "N", "J", "Z", "S", "Q", "V", "H", "L", "C", "K", "E" };
            //string opcionYN = "Y";
            //int dni = 0, divisor = 23, resultado = 0;

            //do
            //{
            //    Console.WriteLine("Digite su DNI");

            //    if (int.TryParse(Console.ReadLine(), out dni))
            //    {
            //        if ((dni.ToString().Length == 8))
            //        {
            //            resultado = dni % divisor;

            //            if (resultado <= dniVocab.Length)
            //            {
            //                Console.WriteLine("El resultado es {0} el cual corresponde a {1}", resultado, dniVocab[resultado]);
            //            }
            //            else
            //            {

            //                Console.WriteLine("No se le puede asignar una letra al resultado de {0}", resultado);
            //            }

            //        }
            //        else
            //        {
            //            Console.WriteLine("La cantidad de digitos en su DNI debe de ser de 8 digitos");
            //        }
            //    }
            //    else
            //    {

            //        Console.WriteLine("El valor debe de ser de tipo numerico");
            //    }

            //    Console.WriteLine("Desea continuar con la ejecusion del programa?(Y/N)");
            //    opcionYN = Console.ReadLine();

            //    while ((opcionYN.ToUpper() != "Y") && (opcionYN.ToUpper() != "N"))
            ////    {
            //        Console.WriteLine("La opcion no es valida,desea continuar con la ejecusion del programa?(Y/N)");
            //        opcionYN = Console.ReadLine();
            //    }

            //} while (opcionYN.ToUpper() == "Y");

            //#9.
            //string[] arrayNames = new[] { "Victor", "James", "Diego", "Fernando", "Luis", "Rafael", "Ricardo", "Tony", "Allan", "Nadia" }, arrayResults = new string[10];
            //double[] arrayNotes = new double[] { 0, 4.99, 5, 7, 8.99, 10, 6, 10, 7, 7 };

            //for (int i = 0; i <= arrayNotes.Length - 1; i++)
            //{
            //    if ((arrayNotes[i] >= 0) && (arrayNotes[i] <= 4.99))
            //    {
            //        arrayResults[i] = "Suspenso";
            //    }
            //    else if ((arrayNotes[i] >= 5) && (arrayNotes[i] <= 6.99))
            //    {
            //        arrayResults[i] = "Bien";
            //    }
            //    else if ((arrayNotes[i] >= 7) && (arrayNotes[i] <= 8.99))
            //    {
            //        arrayResults[i] = "Notable";
            //    }
            //    else if ((arrayNotes[i] >= 9) && (arrayNotes[i] <= 10))
            //    {
            //        arrayResults[i] = "Sobresaliente";
            //    }
            //    else
            //    {
            //        arrayResults[i] = "Sin especificar";
            //    }
            //}

            //showStudentsData(arrayNames, arrayResults, arrayNotes);
            //Console.ReadLine();

            //#10.
            //    int num = 0;
            //    string numInvert = "", opcionYN = "Y";

            //    do
            //    {
            //        Console.WriteLine("Digite un numero");

            //        if (int.TryParse(Console.ReadLine(), out num))
            //        {
            //            if (num.ToString().Length >= 2)
            //            {
            //                for (int i = num.ToString().Length - 1; i >= 0; i--)
            //                {
            //                    numInvert += num.ToString()[i];
            //                }

            //                Console.WriteLine("El numero {0} {1}", num.ToString(), ((numInvert.ToString() == num.ToString()) ? "es capicua" : "no es capicua"));
            //            }
            //            else
            //            {
            //                Console.WriteLine("El numero 2 o mas digitos");
            //            }
            //        }
            //        else
            //        {
            //            Console.WriteLine("Debe digitar un dato de tipo numerico entero");
            //        }

            //        Console.WriteLine("Desea continuar con la ejecusion del programa?(Y/N)");
            //        opcionYN = Console.ReadLine();

            //        while ((opcionYN.ToUpper() != "Y") && (opcionYN.ToUpper() != "N"))
            //        {
            //            Console.WriteLine("La opcion no es valida,desea continuar con la ejecusion del programa?(Y/N)");
            //            opcionYN = Console.ReadLine();
            //        }

            //    } while (opcionYN.ToUpper() == "Y");
            //}

            //static void showStudentsData(string[] pArrayNames, string[] pArrayResults, double[] arrayNotes)
            //{
            //    if (pArrayNames.Length > 0)
            //    {
            //        for (int i = 0; i <= pArrayNames.Length - 1; i++)
            //        {
            //            Console.WriteLine("");
            //            Console.WriteLine("Nombre {0} Nota {1} Resultado {2}", pArrayNames[i], pArrayResults[i], arrayNotes[i]);
            //        }
            //    }
            //    else
            //    {
            //        Console.WriteLine("Data no disponible");
            //    }

            //#11.
            //int[] arrayNum = new int[] { 1, 2, 3, 4, 5 };
            //int[] arrayNumInvert = new int[5];
            //int cont = 0;

            //for (int i = arrayNum.Length - 1; i >= 0; i--)
            //{
            //    arrayNumInvert[cont] = arrayNum[i];
            //    cont++;
            //}

            //mostrarArregloNum(arrayNum);
            //mostrarArregloNum(arrayNumInvert);
            //Console.ReadLine();

            //#12.
            //string[] array1 = new string[4];
            //string[] array2 = new string[4];
            //bool equalArray = true;
            //string opcionYN = "Y";

            //do
            //{
            //    equalArray = true;
            //    Console.WriteLine("Digite los datos del primer array");
            //    Console.WriteLine("");
            //    fillArray(array1);
            //    Console.WriteLine("Digite los datos del segundo array");
            //    Console.WriteLine("");
            //    fillArray(array2);

            //    if (array1.Length == array2.Length)
            //    {
            //        for (int i = 0; i <= array1.Length - 1; i++)
            //        {
            //            if (array1[i] != array2[i])
            //            {
            //                equalArray = false;
            //                break;
            //            }
            //        }
            //    }
            //    else
            //    {
            //        equalArray = false;
            //    }

            //    Console.WriteLine("Los 2 arreglos son {0}", (equalArray == true) ? "iguales" : "diferentes");
            //    Console.WriteLine("Desea continuar con la ejecusion del programa?(Y/N)");
            //    opcionYN = Console.ReadLine();

            //    while ((opcionYN.ToUpper() != "Y") && (opcionYN.ToUpper() != "N"))
            //    {
            //        Console.WriteLine("La opcion no es valida,desea continuar con la ejecusion del programa?(Y/N)");
            //        opcionYN = Console.ReadLine();
            //    }

            //} while (opcionYN.ToUpper() == "Y");

            //#13.

            //LLENAR UN ARRAY CON NUMEROS DE 1 A 100 SIN REPETIR,DE MANERA ALEATORIA 

            //VERSION A
            //Random ran = new Random();
            //int[] arrayNum = new int[10];
            //int numAleat = 0;
            //bool equal = false;

            //for (int i = 0; i <= arrayNum.Length - 1; i++)
            //{
            //    equal = false;
            //    numAleat = ran.Next(1, 101);

            //    if (i == 0)
            //    {
            //        arrayNum[i] = numAleat;
            //    }
            //    else
            //    {
            //        for (int j = 0; j <= i; j++)
            //        {
            //            if ((numAleat == arrayNum[j]))
            //            {
            //                equal = true;
            //                break;
            //            }
            //        }

            //        if (equal == false)
            //        {
            //            arrayNum[i] = numAleat;
            //        }
            //        else if (equal == true)
            //        {
            //            i--;
            //        }
            //    }
            //}


            //Console.ReadLine();

            //ORDENAR CON METODO BURBUJA
            //Console.WriteLine("");
            //Console.WriteLine("----ORDENAMIENTO DE TIPO BURBUJA----");

            //int[] tempArray = new int[] { 40, 3, 10, 1, 5, 7, 9, 11, 4, 6 };
            //int[] tempArray = new int[] { 9, 1, 7, 4, 6, 0, 2, 3, 5, 8 };

            //mostrarArregloNum(arrayNum);
            //bubbleMethod(arrayNum);
            //bubbleMethod2(arrayNum);
            //bubbleMethod3(arrayNum);
            //bubbleMethod4(arrayNum);
            //mostrarArregloNum(arrayNum);


            //mostrarArregloNum(tempArray);
            //bubbleMethod(tempArray);
            //bubbleMethod2(tempArray);
            //bubbleMethod3(tempArray);
            //bubbleMethod4(tempArray);

            //Console.WriteLine("");
            //Console.WriteLine("DESPUES DEL ORDENAMIENTO DE TIPO BURBUJA");
            //mostrarArregloNum(tempArray);
            //Console.ReadLine();

            //int[] orderArray = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 };
            //mostrarArregloNum(orderArray);
            //bubbleMethod5(orderArray);
            //mostrarArregloNum(orderArray);
            //Console.ReadLine();


            //int[] n = { 1, 3, 2, 8, 6 };
            //int[] n = new int[] { 40, 3, 10, 1, 5, 7, 9, 11, 4, 6 };

            //int[] a = bubbleMethod6(n);

            //for (int i = 0; i < a.Length; i++)
            //{
            //    Console.WriteLine(a[i]);
            //}
            //Console.ReadKey();

            //#14.METODO QUICK SORT(ES EL METODO DE ORDENAMIENTO MAS RAPIDO JAMAS CREADO!!!)
            //OJO ES DE ESPECIAL IMPORTANCIA SELECCIONAR CORRECTAMENTE EL PIVOTE!!!
            //ESTE ES EL METODO MAS EFECTIVO PARA ELEMENTOS DESORDENADOS
            //int[] tempArray = new int[] { 9, 1, 7, 4, 6, 0, 2, 3, 5, 8 };

            //int[] tempArray = new int[] { 5, 1, 3, 4, 2, 0 };

            //int[] tempArray = new int[] { 7, 9, 8 };

            int[] tempArray = new int[] { 7, 8, 14, 12, 2, 1, 3, 21 };
            //int[] tempArray = new int[] { 7, 8, 14, 12 };
            //int[] tempArray = new int[] { 2, 1, 3, 21 };

            int separator = 0;

            int[] array1 = null, array2 = null;

            tempArray = quickSort(tempArray);

            //tempArray = quickSort(tempArray, out separator);

            //tempArray = splitArrayAfterQuickSort(out array1, out array2, tempArray, separator);

            mostrarArregloNum(tempArray);

            Console.ReadLine();


            //#15.

            //----------------------------EJERCISIOS CON MATRICES----------------------------

            //#1.
            //    Console.WriteLine("-------EJEMPLO DE MATRIZ-------");

            //    int[,] matriz = new int[3, 3];
            //    int cont = 1;

            //    for (int i = 0; i < 3; i++)
            //    {
            //        for (int j = 0; j < 3; j++)
            //        {
            //            matriz[i, j] = cont;
            //            cont++;
            //            Console.Write("{0}", matriz[i, j]);
            //        }
            //        Console.WriteLine();
            //    }
            //    Console.ReadLine();

            //#2.
            //    int numColumns = 0;
            //    int[,] matriz;
            //    string contYN = "Y";
            //    Random ram = new Random();

            //    do
            //    {
            //        Console.WriteLine("Digite la cantidad de columnas de una matriz de 5 filas");

            //        if (int.TryParse(Console.ReadLine(), out numColumns))
            //        {
            //            matriz = new int[5, numColumns];

            //            for (int i = 0; i < 5; i++)
            //            {
            //                for (int j = 0; j <= numColumns - 1; j++)
            //                {
            //                    matriz[i, j] = ram.Next(0, 10);

            //                    Console.Write("{0}", matriz[i, j]);
            //                }
            //                Console.WriteLine();
            //            }

            //        }
            //        else
            //        {
            //            Console.WriteLine("El valor debe de ser de tipo numerico");
            //        }

            //        Console.WriteLine("Desea continuar con la ejecusion del programa?(Y/N)");
            //        contYN = Console.ReadLine();

            //        while ((contYN.ToUpper() != "Y") && (contYN.ToUpper() != "N"))
            //        {
            //            Console.WriteLine("La opcion digitada es invalida,desea continuar?(Y/N)");
            //            contYN = Console.ReadLine();
            //        }


            //    } while (contYN.ToUpper() == "Y");

            //#3.
            //int[,] matrizA, matrizB, matrizC;
            //int numRow = 0, numCol = 0;

            //Console.WriteLine("Digite el numero de filas de la matriz");

            //if (int.TryParse(Console.ReadLine(), out numRow))
            //{
            //    Console.WriteLine("Digite el numero de columnas de la matriz");

            //    if (int.TryParse(Console.ReadLine(), out numCol))
            //    {
            //        Console.WriteLine("Creacion de la primera matriz");
            //        Console.WriteLine();

            //        matrizA = fillMatriz(numRow, numCol);
            //        showMatriz(matrizA);

            //        Console.WriteLine("Creacion de la segunda matriz");
            //        Console.WriteLine();

            //        matrizB = fillMatriz(numRow, numCol);
            //        showMatriz(matrizB);

            //        Console.WriteLine("Suma de las 2 primeras matrices");
            //        Console.WriteLine();

            //        matrizC = showMatrizSum(matrizA, matrizB);
            //        showMatriz(matrizC);

            //    }
            //    else
            //    {
            //        Console.WriteLine("El valor debe de ser de tipo numerico entero");
            //    }
            //}
            //else
            //{
            //    Console.WriteLine("El valor debe de ser de tipo numerico entero");
            //}

            //Console.ReadLine();

            //#4.
            //int row = 0, col = 0;
            //int opcion = 0;
            //int[,] matriz = new int[0, 0];
            //bool fillFlag = false;

            //do
            //{
            //    Console.WriteLine();
            //    Console.WriteLine("----Opciones del sistema----" +
            //                      "\n1.Rellenar Matriz" +
            //                      "\n2.Suma de una fila" +
            //                      "\n3.Suma de una columna" +
            //                      "\n4.Sumar diagonal principal" +
            //                      "\n5.Sumar diagonal inversa" +
            //                      "\n6.La media de todos los valores" +
            //                      "\n7.Salir del sistema");

            //    if (int.TryParse(Console.ReadLine(), out opcion))
            //    {
            //        switch (opcion)
            //        {
            //            case 1:
            //                matriz = fillMatriz(4, 4);
            //                showMatriz(matriz);
            //                fillFlag = true;
            //                break;
            //            case 2:
            //                if (fillFlag)
            //                {
            //                    Console.WriteLine("Digite el numero de fila que desea sumar");

            //                    if (int.TryParse(Console.ReadLine(), out row))
            //                    {
            //                        sumRow(matriz, row);
            //                        Console.WriteLine();
            //                        showMatriz(matriz);
            //                    }
            //                    else
            //                    {
            //                        Console.WriteLine("El valor debe de ser de tipo numerico y entero");
            //                    }
            //                }
            //                else
            //                {
            //                    Console.WriteLine("Debe de llenar la matriz,antes de acceder a esta opcion!!");
            //                }
            //                break;
            //            case 3:
            //                if (fillFlag)
            //                {
            //                    Console.WriteLine("Digite el numero de columna que desea sumar");

            //                    if (int.TryParse(Console.ReadLine(), out col))
            //                    {
            //                        sumCol(matriz, col);
            //                        Console.WriteLine();
            //                        showMatriz(matriz);
            //                    }
            //                    else
            //                    {
            //                        Console.WriteLine("El valor debe de ser de tipo numerico y entero");
            //                    }
            //                }
            //                else
            //                {
            //                    Console.WriteLine("Debe de llenar la matriz,antes de acceder a esta opcion!!");
            //                }
            //                break;
            //            case 4:
            //                if (fillFlag)
            //                {
            //                    sumDiagonal(matriz);
            //                    Console.WriteLine();
            //                    showMatriz(matriz);
            //                }
            //                else
            //                {
            //                    Console.WriteLine("Debe de llenar la matriz,antes de acceder a esta opcion!!");
            //                }
            //                break;
            //            case 5:
            //                if (fillFlag)
            //                {
            //                    //sumDiagonalInversaA(matriz);
            //                    //sumDiagonalInversaB(matriz);
            //                    //sumDiagonalInversaC(matriz);
            //                    sumDiagonalInversaD(matriz);
            //                    Console.WriteLine();
            //                    showMatriz(matriz);
            //                }
            //                else
            //                {
            //                    Console.WriteLine("Debe de llenar la matriz,antes de acceder a esta opcion!!");
            //                }
            //                break;
            //            case 6:
            //                if (fillFlag)
            //                {
            //                    matrizAverage(matriz);
            //                    Console.WriteLine();
            //                    showMatriz(matriz);
            //                }
            //                else
            //                {
            //                    Console.WriteLine("Debe de llenar la matriz,antes de acceder a esta opcion!!");
            //                }
            //                break;
            //        }
            //    }
            //    else
            //    {
            //        Console.WriteLine("La opcion no es valida,debe de seleccionar una opcion de 1 a 6");
            //    }

            //} while (opcion <= 7);

            //#5.
            //VERSION A

            //int[,] matriz = new int[3, 3];
            //Random ram = new Random();
            //int num = 0, cont = 0, i = 0, j = 0, opcion = 0, subOpcion = 0, row = 0, col = 0;
            //bool findElement = false;
            //string opciMainMenu = "Y";

            //while (cont < (matriz.GetLength(0) * matriz.GetLength(1)))
            //{
            //    findElement = false;

            //    num = ram.Next(0, 10);

            //    for (int ik = 0; ik < matriz.GetLength(0); ik++)
            //    {
            //        for (int jk = 0; jk < matriz.GetLength(1); jk++)
            //        {
            //            if (num == matriz[ik, jk])
            //            {
            //                findElement = true;
            //                break;
            //            }
            //        }

            //        if (findElement)
            //        {
            //            break;
            //        }
            //    }

            //    if (!findElement)
            //    {
            //        matriz[i, j] = num;
            //        j++;

            //        if (j >= matriz.GetLength(1))
            //        {
            //            j = 0;
            //            i++;
            //        }

            //        cont++;
            //    }
            //}
            //showMatriz(matriz);

            ////#6.
            //do
            //{
            //    Console.WriteLine();
            //    Console.WriteLine("Seleccione alguna de la siguientes opciones :" +
            //                      "\n1.Suma de Fila" +
            //                      "\n2.Suma de Columna" +
            //                      "\n3.Salir");

            //    opcion = Convert.ToInt16(Console.ReadLine());

            //    if (opcion != 3)
            //    {

            //        Console.WriteLine();
            //        Console.WriteLine("Seleccione el tipo de suma" +
            //                          "\n1.Aleatoria" +
            //                          "\n2.Prederteminada");

            //        subOpcion = Convert.ToInt16(Console.ReadLine());

            //        switch (opcion)
            //        {
            //            case 1:

            //                switch (subOpcion)
            //                {
            //                    case 1:
            //                        Console.WriteLine("Suma aleatoria de fila");
            //                        row = ram.Next(0, matriz.GetLength(0));
            //                        sumRow(matriz, row);
            //                        break;

            //                    case 2:
            //                        Console.WriteLine("Suma prederteminada de fila");
            //                        Console.WriteLine();
            //                        Console.WriteLine("Digite la fila que desea sumar");

            //                        if (int.TryParse(Console.ReadLine(), out row))
            //                        {
            //                            sumRow(matriz, row);
            //                        }
            //                        else
            //                        {
            //                            Console.WriteLine("El valor debe de ser de tipo numerico");
            //                        }
            //                        break;
            //                }

            //                break;

            //            case 2:

            //                switch (subOpcion)
            //                {
            //                    case 1:
            //                        Console.WriteLine("Suma aleatoria de columna");
            //                        col = ram.Next(0, matriz.GetLength(1));
            //                        sumCol(matriz, col);
            //                        break;

            //                    case 2:
            //                        Console.WriteLine("Suma prederteminada de columna");
            //                        Console.WriteLine();
            //                        Console.WriteLine("Digite la columna que desea sumar");

            //                        if (int.TryParse(Console.ReadLine(), out col))
            //                        {
            //                            sumCol(matriz, col);
            //                        }
            //                        else
            //                        {
            //                            Console.WriteLine("El valor debe de ser de tipo numerico");
            //                        }
            //                        Console.WriteLine();
            //                        break;
            //                }

            //                break;
            //        }
            //        Console.WriteLine();
            //        Console.WriteLine("Desea volver a ejecutar el programa?(Y/N)");

            //        opciMainMenu = Console.ReadLine();
            //    }
            //} while ((opcion != 3) && (opciMainMenu.ToUpper() != "N"));


            //#7.
            //int opcion = 0;
            //string codCandy = "", menuYN = "Y";
            //string[,] nombresGolosinas = {{"KitKat", "Chicles de fresa", "Lacasitos", "Palotes"},
            //                              {"Kinder Bueno", "Bolsa variada Haribo", "Chetoos", "Twix"},
            //                              {"Kinder Bueno", "M&M'S", "Papa Delta", "Chicles de menta"},
            //                              {"Lacasitos", "Crunch", "Milkybar", "KitKat"}};

            //double[,] precio = { { 1.1, 0.8, 1.5, 0.9 }, { 1.8, 1, 1.2, 1 }, { 1.8, 1.3, 1.2, 0.8 }, { 1.5, 1.1, 1.1, 1.1 } };

            //int[,] cantidad = { { 3, 4, 2, 5, 6 }, { 3, 4, 1, 5, 9 }, { 1, 4, 2, 5, 6 }, { 3, 9, 2, 10, 6 } };

            //do
            //{
            //    if (menuYN.ToUpper() == "Y")
            //    {
            //        Console.WriteLine("Maquina expendedora de dulces" +
            //                          "\n1.Pedir golosina" +
            //                          "\n2.Mostrar golosinas" +
            //                          "\n3.Rellenar golosinas" +
            //                          "\n4.Apagar maquina");

            //        if (int.TryParse(Console.ReadLine(), out opcion))
            //        {
            //            switch (opcion)
            //            {
            //                case 1:
            //                    showCandies(nombresGolosinas, precio, cantidad);
            //                    Console.WriteLine();
            //                    Console.WriteLine("Digite el codigo de la golosina que quiere seleccionar :");
            //                    codCandy = Console.ReadLine();
            //                    buyCandy(nombresGolosinas, cantidad, precio, codCandy);
            //                    break;

            //                case 2:
            //                    showCandies(nombresGolosinas, precio, cantidad);
            //                    break;

            //                case 3:

            //                    Console.WriteLine("Digite la contraseña");

            //                    if (password(Console.ReadLine()))
            //                    {
            //                        Console.WriteLine();
            //                        Console.WriteLine("Bienvenido Administrador");
            //                        Console.WriteLine();
            //                        Console.WriteLine("Digite el codigo de la golosina que quiere seleccionar :");
            //                        codCandy = Console.ReadLine();
            //                        Console.WriteLine("Digite la cantidad que desea digitar");

            //                        if (int.TryParse(Console.ReadLine(), out int cant))
            //                        {
            //                            fillCandies(cantidad, codCandy, cant);
            //                        }
            //                        else
            //                        {
            //                            Console.WriteLine("El valor debe de ser de tipo entero positivo");
            //                        }
            //                    }
            //                    else
            //                    {
            //                        Console.WriteLine("La contraseña no es valida");
            //                    }

            //                    break;
            //                case 4:
            //                    showHistorial();
            //                    break;
            //            }

            //        }
            //    }

            //    do
            //    {
            //        if ((menuYN.ToUpper() != "Y") && (menuYN.ToUpper() != "N"))
            //        {
            //            Console.WriteLine("La opcion no es valida");
            //        }

            //        if ((opcion != 4))
            //        {

            //            Console.WriteLine("Desea continuar con la ejecusion del programa?(Y/N)");
            //            menuYN = Console.ReadLine();

            //        }
            //        else if (opcion == 4)
            //        {
            //            Console.WriteLine("Todavia desea continuar con la ejecusion de la maquina?(Y/N)");
            //            menuYN = Console.ReadLine();
            //        }


            //    } while ((menuYN.ToUpper() != "Y") && (menuYN.ToUpper() != "N"));

            //} while ((opcion != 4) || (menuYN.ToUpper() == "Y"));

            //#8.
            //char[,] matriz = resetMatriz();
            //bool endGame = false;
            //string currentPlayer = "", contin = "";

            //while (!endGame)
            //{
            //    if (!endGame)
            //    {
            //        currentPlayer = "JUGADOR 1";
            //        selectPlayer(currentPlayer, 'X', out endGame, matriz);
            //    }

            //    if (!endGame)
            //    {
            //        currentPlayer = "JUGADOR 2";
            //        selectPlayer(currentPlayer, 'O', out endGame, matriz);
            //    }

            //    if (endGame)
            //    {
            //        do
            //        {
            //            Console.WriteLine();
            //            Console.WriteLine("Desea volver a jugar?(S/N)");
            //            contin = Console.ReadLine();

            //            if (contin.ToUpper() == "S")
            //            {
            //                endGame = false;
            //                matriz = resetMatriz();
            //            }
            //            else if (contin.ToUpper() == "N")
            //            {
            //                endGame = true;
            //            }
            //            else
            //            {
            //                Console.WriteLine("La opcion no es valida");
            //            }

            //        } while ((contin.ToUpper() != "S") && (contin.ToUpper() != "N"));
            //    }

            //}

            //#9.

            //int[,] matriz1 = new int[2, 3];
            //int[,] matriz2 = new int[2, 3];

            //fillRandomMatriz(matriz1);
            //showMatriz(matriz1);

            //fillRandomMatriz(matriz2);
            //showMatriz(matriz2);

            //showMatriz(showMatrizSum(matriz1, matriz2));

            //Console.ReadLine();

            //#10.

            //int[,] personas = new int[3, 10];

            //Random rSex = new Random();
            //Random rWorkStatus = new Random();
            //Random rSalary = new Random();

            //for (int i = 0; i < personas.GetLength(0); i++)
            //{
            //    for (int j = 0; i < personas.GetLength(1); i++)
            //    {
            //        switch (i)
            //        {
            //            case 0:
            //                personas[i, j] = rSex.Next(1, 2);
            //                break;

            //            case 1:
            //                personas[i, j] = rWorkStatus.Next(1, 2);
            //                break;

            //            case 2:
            //                personas[i, j] = rSalary.Next(600, 2000);
            //                break;
            //        }
            //    }
            //}

            //showMatriz(personas);

            //Console.ReadLine();

            //#11.
            //bool opcionMenu = false;
            //int opcion = 0;
            //int[,] matriz = null, rowValResults = null, colValResults = null;

            //matriz = requestDataMatriz();

            //if (matriz != null)
            //{
            //    do
            //    {
            //        Console.WriteLine("Opciones" +
            //                    "\n 1.Mostrar, para cada fila, la suma de sus valores, y el menor valor almacenado" +
            //                    "\n 2.Mostrar, para cada columna, el promedio de sus valores y el mayor valor" +
            //                    "\n 3.El mayor valor almacenado en toda la Matriz" +
            //                    "\n 4.Cambiar el numero de filas y columnas");

            //        if (int.TryParse(Console.ReadLine(), out opcion))
            //        {
            //            if ((opcion >= 1) && (opcion <= 4))
            //            {
            //                switch (opcion)
            //                {
            //                    case 1:
            //                        showMatriz(matriz);
            //                        Console.WriteLine();
            //                        Console.WriteLine("La suma de cada fila es la siguiente :");

            //                        rowValResults = rowSumMatriz(matriz);

            //                        for (int i = 0; i < rowValResults.GetLength(0); i++)
            //                        {
            //                            Console.WriteLine("\n ->La suma de la fila {0} es : {1} y el menor valor en la fila es : {2}", i, rowValResults[i, resultValues - 2], rowValResults[i, resultValues - 1]);
            //                        }
            //                        opcionMenu = contProgram();

            //                        break;

            //                    case 2:
            //                        showMatriz(matriz);
            //                        Console.WriteLine();
            //                        Console.WriteLine("El promedio de cada columna es el siguiente :");

            //                        colValResults = colSumMatriz(matriz);

            //                        for (int j = 0; j < colValResults.GetLength(0); j++)
            //                        {
            //                            Console.WriteLine("\n ->El promedio de la columna {0} es : {1} y el mayor valor de la columna es : {2}", j, colValResults[j, resultValues - 2], colValResults[j, resultValues - 1]);
            //                        }
            //                        opcionMenu = contProgram();

            //                        break;

            //                    case 3:

            //                        int rowFound = 0;
            //                        int colFound = 0;
            //                        int maxValueGlobal = maxValueMatriz(matriz, out rowFound, out colFound);

            //                        Console.WriteLine("El mayor valor almacenado en toda la Matriz es {0},se encuentra en la fila {1}  y en la columna {2}", maxValueGlobal, rowFound, colFound);

            //                        opcionMenu = contProgram();

            //                        break;

            //                    case 4:
            //                        matriz = requestDataMatriz();

            //                        opcionMenu = contProgram();

            //                        break;
            //                }
            //            }
            //            else
            //            {
            //                Console.WriteLine("La opcion no es valida,la opcion debe de estar entre 1 y 3");
            //            }
            //        }
            //        else
            //        {
            //            Console.WriteLine("La opcion debe de ser de tipo entero");
            //        }

            //    } while (opcionMenu);
            //}

            //#12.

            //int[,] matriz = null;
            //int opcion = 0;
            //bool subOpcion = false;

            //do
            //{
            //    Console.WriteLine("Seleccione la opcion deseada" +
            //        "\n 1.Llenar matriz por default" +
            //        "\n 2.Llenar matriz manualmente" +
            //        "\n 3.Crear matriz transpuesta");

            //    opcion = Convert.ToInt16(Console.ReadLine());

            //    switch (opcion)
            //    {
            //        case 1:

            //            matriz = new int[3, 5] { { 4, 7, 1, 3, 5 }, { 2, 0, 6, 9, 7 }, { 3, 1, 2, 6, 4 } };
            //            showMatriz(matriz);
            //            subOpcion = contProgram();
            //            break;

            //        case 2:
            //            matriz = requestDataMatriz();
            //            showMatriz(matriz);
            //            subOpcion = contProgram();
            //            break;

            //        case 3:

            //            if (matriz != null)
            //            {
            //                Console.WriteLine();
            //                showMatriz(showMatrizTranspuesta(matriz));
            //            }
            //            else
            //            {
            //                Console.WriteLine("Antes de seleccionar esta opcion,primero debe de llenar la matriz");
            //            }
            //            subOpcion = contProgram();
            //            break;
            //    }

            //} while (subOpcion);

            //#13.
            //int[,] matriz = null;
            //int opcion = 0;
            //bool subOpcion = false;

            //do
            //{
            //    Console.WriteLine();
            //    Console.WriteLine("Opciones" +
            //        "\n 1.llenar matriz" +
            //        "\n 2.Sumar triangulo inferior y triangulo superior" +
            //        "\n 3.Salir de programa");

            //    subOpcion = validateIntegerField(Console.ReadLine(), out opcion);

            //    if (subOpcion)
            //    {
            //        switch (opcion)
            //        {
            //            case 1:
            //                matriz = new int[5, 5] { { 5, 7, 8, 9, 10 }, { 1, 6, 4, 5, 6 }, { 2, 3, 9, 2, 3 }, { 4, 5, 6, 4, 1 }, { 7, 8, 9, 3, 10 } };
            //                showMatriz(matriz);
            //                subOpcion = contProgram();
            //                break;

            //            case 2:
            //                if (matriz != null)
            //                {
            //                    Console.WriteLine();
            //                    matriz = sumTriang_Inf_Sup(matriz);
            //                    showMatriz(matriz);
            //                }
            //                else
            //                {
            //                    Console.WriteLine("Antes de seleccionar esta opcion,primero debe de llenar la matriz");
            //                }
            //                subOpcion = contProgram();
            //                break;

            //            case 3:
            //                subOpcion = false;
            //                break;
            //        }
            //    }
            //    else
            //    {
            //        Console.WriteLine();
            //        Console.WriteLine("El valor digitado debe de ser tipo entero");
            //        subOpcion = contProgram();
            //    }

            //} while (subOpcion);

            //CREAR UN JUEGO DE AHORCADO
        }

        static int[,] sumTriang_Inf_Sup(int[,] pMatriz)
        {
            int[,] sumMatriz = pMatriz;

            for (int i = 0; i < pMatriz.GetLength(1); i++)
            {
                for (int j = 1; j <= pMatriz.GetLength(0) - 1; j++)
                {
                    sumMatriz[j, i] = sumMatriz[j, i] + sumMatriz[i, j];

                    for (int x = 0; x <= i; x++)
                    {
                        sumMatriz[x, i] = 0;
                    }
                }

            }

            return sumMatriz;
        }

        static int[,] showMatrizTranspuesta(int[,] pMatriz)
        {
            int[,] matrizTranspuesta = new int[pMatriz.GetLength(1), pMatriz.GetLength(0)];

            for (int i = 0; i < matrizTranspuesta.GetLength(0); i++)
            {
                for (int j = 0; j < matrizTranspuesta.GetLength(1); j++)
                {
                    matrizTranspuesta[i, j] = pMatriz[j, i];
                }
            }
            return matrizTranspuesta;
        }

        static int[,] requestDataMatriz()
        {
            int row = 0, col = 0;
            int[,] matriz = null;
            bool checkRow = false, checkCol = false;

            do
            {
                Console.WriteLine();
                Console.WriteLine("Digite el numero de filas");

                checkRow = validateIntegerField(Console.ReadLine(), out row);

                if (checkRow)
                {
                    do
                    {
                        Console.WriteLine();
                        Console.WriteLine("Digite el numero de columnas");

                        checkCol = validateIntegerField(Console.ReadLine(), out col);

                        if (checkCol)
                        {
                            matriz = fillDinaMatriz(row, col);
                        }
                        else
                        {
                            Console.WriteLine("El numero de columnas debe de ser de tipo entero");
                        }

                    } while (!checkCol);
                }
                else
                {
                    Console.WriteLine("El numero de filas debe de ser de tipo entero");
                }

            } while (!checkRow);

            return matriz;
        }

        static int[,] fillDinaMatriz(int pRow, int pCol)
        {
            int[,] matriz = null;
            int val = 0;
            bool checkVal = false;

            if ((pRow > 0) && (pRow < 10))
            {
                if ((pCol > 0) && (pCol < 10))
                {
                    matriz = new int[pRow, pCol];

                    for (int i = 0; i < pRow; i++)
                    {
                        for (int j = 0; j < pCol; j++)
                        {
                            do
                            {
                                Console.WriteLine();
                                Console.WriteLine("Digite el valor de la fila {0} y de la columna {1}", i, j);

                                checkVal = validateIntegerField(Console.ReadLine(), out val);

                                if (checkVal)
                                {
                                    matriz[i, j] = val;
                                    showMatriz(matriz);
                                    Console.WriteLine();
                                }
                                else
                                {
                                    Console.WriteLine("El valor debe de ser de tipo entero");
                                }
                            } while (!checkVal);

                        }
                    }
                }
                else
                {
                    Console.WriteLine("El numero de columnas debe de ser positivo y menor a 10");
                }
            }
            else
            {
                Console.WriteLine("El numero de filas debe de ser positivo y menor a 10");
            }

            return matriz;
        }

        static bool validateIntegerField(string pValue, out int pValOut)
        {
            bool validate = false;

            if (int.TryParse(pValue, out pValOut))
            {
                validate = true;
            }

            return validate;
        }

        static bool contProgram()
        {
            bool contProgram = true;
            string contYN = "";

            Console.WriteLine();
            Console.WriteLine("Desea seguir con la ejecusion del programa?(Y/N)");
            contYN = Console.ReadLine();

            while ((contYN.ToUpper() != "Y") && (contYN.ToUpper() != "N"))
            {
                Console.WriteLine();
                Console.WriteLine("La opcion no es valida,desea seguir con la ejecusion del programa?(Y/N)");
                contYN = Console.ReadLine();
            }

            if (contYN.ToUpper() == "N")
            {
                contProgram = false;
            }

            return contProgram;
        }

        static int maxValueMatriz(int[,] pMatriz, out int pRowFound, out int pColFound)
        {
            int maxValueGlobal = 0;
            pRowFound = 0;
            pColFound = 0;

            for (int i = 0; i < pMatriz.GetLength(0); i++)
            {
                for (int j = 0; j < pMatriz.GetLength(1); j++)
                {
                    if (pMatriz[i, j] >= maxValueGlobal)
                    {
                        maxValueGlobal = pMatriz[i, j];
                        pRowFound = i;
                        pColFound = j;
                    }
                }
            }
            return maxValueGlobal;
        }

        static int[,] rowSumMatriz(int[,] pMatriz)
        {
            int firstElementRow = 0, sumRow = 0, minValueRow = 0;

            int[,] rowValResults = new int[pMatriz.GetLength(0), resultValues];//SAVES THE ROW'S RESULTS

            for (int i = 0; i < pMatriz.GetLength(0); i++)
            {
                for (int j = 0; j < pMatriz.GetLength(1); j++)
                {
                    sumRow += pMatriz[i, j];

                    if (j == 0)
                    {
                        if (i == firstElementRow)
                        {
                            minValueRow = pMatriz[i, j];
                        }
                    }
                    if (minValueRow >= pMatriz[i, j])
                    {
                        minValueRow = pMatriz[i, j];
                    }
                }

                rowValResults[i, resultValues - 1] = minValueRow;
                rowValResults[i, resultValues - 2] = sumRow;
                sumRow = 0;
                firstElementRow++;
            }

            return rowValResults;
        }

        static int[,] colSumMatriz(int[,] pMatriz)
        {
            int firstElementCol = 0, sumCol = 0, maxValueCol = 0;

            int[,] colValResults = new int[pMatriz.GetLength(1), resultValues];//SAVES THE COLUMN'S RESULTS

            for (int i = 0; i < pMatriz.GetLength(1); i++)
            {
                for (int j = 0; j < pMatriz.GetLength(0); j++)
                {
                    sumCol += pMatriz[j, i];

                    if (maxValueCol <= pMatriz[j, i])
                    {
                        maxValueCol = pMatriz[j, i];
                    }
                }
                colValResults[i, resultValues - 1] = maxValueCol;
                colValResults[i, resultValues - 2] = sumCol;
                sumCol = 0;
                maxValueCol = 0;
                firstElementCol++;
            }

            return colValResults;
        }


        static int[,] fillRandomMatriz(int[,] pMatriz)
        {
            Random ram = new Random();

            for (int i = 0; i < pMatriz.GetLength(0); i++)
            {
                for (int j = 0; j < pMatriz.GetLength(1); j++)
                {
                    pMatriz[i, j] = ram.Next(0, 10);
                }
            }
            return pMatriz;
        }


        static void selectPlayer(string pJugador, char pMark, out bool pEndGame, char[,] pMatriz)
        {
            Console.WriteLine();
            Console.WriteLine(pJugador);
            Console.WriteLine("Digite la posicion que quiere marcar :");

            while (!markMatriz(pMark, Console.ReadLine(), pMatriz))
            {
                Console.WriteLine();
                Console.WriteLine("Vuelva a intentarlo,digite la posicion que quiere marcar :");
            }
            pEndGame = checkGame(pMatriz, out result);
            Console.WriteLine();
            showMatrizChar(pMatriz);
            Console.WriteLine();

            if (pEndGame)
            {
                if (result != 3)
                {
                    Console.WriteLine("El juego ha terminado,el {0} ha ganado!!", pJugador);

                }
                else if (result == 3)
                {
                    Console.WriteLine("Es imposible continuar con el juego");
                }
            }
        }

        static bool checkGame(char[,] pMatrizA, out int pResult)
        {
            bool GameEnded = false;
            int succesCountVerticalP1 = 0, succesCountHorizontalP1 = 0, succesCountDiagP1 = 0, succesCountDiagIP1 = 0,
                succesCountVerticalP2 = 0, succesCountHorizontalP2 = 0, succesCountDiagP2 = 0,
                succesCountDiagIP2 = 0, posInv = 0, contTotal = 0;
            char positTempVertical = ' ', positTempHorizotal = ' ', positTempDiagonal = ' ', positTempDiaglI = ' ';

            pResult = 0;

            for (int i = 0; i < pMatrizA.GetLength(0); i++)
            {
                posInv = pMatrizA.GetLength(1);

                if (!GameEnded)
                {
                    if (contTotal != 9)
                    {
                        succesCountVerticalP1 = 0;
                        succesCountHorizontalP1 = 0;
                        succesCountDiagP1 = 0;
                        succesCountDiagIP1 = 0;

                        succesCountVerticalP2 = 0;
                        succesCountHorizontalP2 = 0;
                        succesCountDiagP2 = 0;
                        succesCountDiagIP2 = 0;

                        for (int j = 0; j < pMatrizA.GetLength(1); j++)
                        {
                            posInv -= 1;

                            positTempVertical = pMatrizA[i, j];

                            positTempHorizotal = pMatrizA[j, i];

                            positTempDiagonal = pMatrizA[j, j];

                            positTempDiaglI = pMatrizA[posInv, j];


                            if ((positTempVertical == 'X'))
                            {
                                succesCountVerticalP1++;
                            }
                            if ((positTempHorizotal == 'X'))
                            {
                                succesCountHorizontalP1++;
                            }
                            if ((positTempDiagonal == 'X'))
                            {
                                succesCountDiagP1++;
                            }
                            if ((positTempDiaglI == 'X'))
                            {
                                succesCountDiagIP1++;
                            }

                            if ((positTempVertical == 'O'))
                            {
                                succesCountVerticalP2++;
                            }
                            if ((positTempHorizotal == 'O'))
                            {
                                succesCountHorizontalP2++;
                            }
                            if ((positTempDiagonal == 'O'))
                            {
                                succesCountDiagP2++;
                            }
                            if ((positTempDiaglI == 'O'))
                            {
                                succesCountDiagIP2++;
                            }

                            if (succesCountVerticalP1 == 3)
                            {
                                GameEnded = true;
                                pResult = 1;
                            }
                            if (succesCountHorizontalP1 == 3)
                            {
                                GameEnded = true;
                                pResult = 1;
                            }

                            if (succesCountDiagP1 == 3)
                            {
                                GameEnded = true;
                                pResult = 1;
                                break;
                            }


                            if (succesCountDiagIP1 == 3)
                            {
                                GameEnded = true;
                                pResult = 1;
                                break;
                            }

                            if (succesCountVerticalP2 == 3)
                            {
                                GameEnded = true;
                                pResult = 2;
                                break;
                            }

                            if (succesCountHorizontalP2 == 3)
                            {
                                GameEnded = true;
                                pResult = 2;
                                break;
                            }

                            if (succesCountDiagP2 == 3)
                            {
                                GameEnded = true;
                                pResult = 2;
                                break;
                            }

                            if (succesCountDiagIP2 == 3)
                            {
                                GameEnded = true;
                                pResult = 2;
                                break;
                            }

                            if (pMatrizA[i, j] != '#')
                            {
                                contTotal++;
                            }

                            if (contTotal == 9)
                            {
                                GameEnded = true;
                                pResult = 3;
                                break;
                            }
                        }
                    }
                }
            }

            return GameEnded;
        }

        static char[,] resetMatriz()
        {
            char[,] pMatriz = { { '#', '#', '#' }, { '#', '#', '#' }, { '#', '#', '#' } };

            return pMatriz;
        }

        static bool markMatriz(char marca, string pPosition, char[,] pMatrizA)
        {
            int x = 0, y = 0;
            bool answer = false;

            if (pPosition.Length == 2)
            {
                x = Convert.ToInt16(pPosition.Substring(0, 1));
                y = Convert.ToInt16(pPosition.Substring(1, 1));

                if ((x <= pMatrizA.GetLength(0)) && (y <= pMatrizA.GetLength(1)))
                {
                    if ((pMatrizA[x, y] == 'O') || (pMatrizA[x, y] == 'X'))
                    {
                        Console.WriteLine("ERROR : La posicion digitada ya ha sido seleccionada");
                    }
                    else if ((!marca.Equals('X')) && (!marca.Equals('O')))
                    {
                        Console.WriteLine("ERROR : Solo puede digitar el caracter 'X' o 'O'");
                    }
                    else
                    {
                        pMatrizA[x, y] = marca;
                        answer = true;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR : La posicion digitada es inexistente");
                }
            }
            else
            {
                Console.WriteLine("ERROR : La posicion digitada no es valida");
            }
            return answer;
        }

        static void showMatrizChar(char[,] pMatrizA)
        {
            for (int i = 0; i < pMatrizA.GetLength(0); i++)
            {
                for (int j = 0; j < pMatrizA.GetLength(1); j++)
                {
                    Console.Write(pMatrizA[i, j]);
                }
                Console.WriteLine();
            }
        }

        static void buyCandy(string[,] pMatrizA, int[,] pMatrizB, double[,] pMatrizC, string position)
        {
            int row = 0, col = 0;

            if (position.Length == 2)
            {
                row = Convert.ToInt16(position.Substring(0, 1));
                col = Convert.ToInt16(position.Substring(1, 1));

                if ((row <= pMatrizA.GetLength(0)) && (col <= pMatrizA.GetLength(1)))
                {
                    if (pMatrizB[row, col] > 0)
                    {
                        pMatrizB[row, col] -= 1;
                        Console.WriteLine("Retire su " + pMatrizA[row, col]);
                        historialMaquina += "\n" + pMatrizA[row, col] + " " + pMatrizC[row, col];
                        totalHistorialMaquina += pMatrizC[row, col];
                    }
                    else
                    {
                        Console.WriteLine("La cantidad del producto seleccionado no es disponible");
                    }
                }
                else
                {
                    Console.WriteLine("El codigo del producto es inexistente");
                }
            }
            else
            {
                Console.WriteLine("El codigo digitado no es valido");
            }
        }

        static void showCandies(string[,] pMatrizA, double[,] pMatrizB, int[,] pMatrizC)
        {
            for (int i = 0; i < pMatrizA.GetLength(0); i++)
            {
                for (int j = 0; j < pMatrizA.GetLength(1); j++)
                {
                    Console.WriteLine("------------------------------------------------------------------------");
                    Console.WriteLine("| Producto :" + pMatrizA[i, j] + "| Codigo:" + i + j + " | Precio:" + pMatrizB[i, j] + " | Cantidad:" + pMatrizC[i, j]);
                }
            }
            Console.WriteLine("------------------------------------------------------------------------");
        }

        static void fillCandies(int[,] pMatrizA, string pPosition, int pCantidad)
        {
            int row = 0, col = 0;

            if (pPosition.Length == 2)
            {
                if ((row <= pMatrizA.GetLength(0)) && (col <= pMatrizA.GetLength(1)))
                {
                    row = Convert.ToInt16(pPosition.Substring(0, 1));
                    col = Convert.ToInt16(pPosition.Substring(1, 1));

                    pMatrizA[row, col] += pCantidad;
                }
            }
            else
            {
                Console.WriteLine("El codigo digitado no es valido");
            }
        }

        static bool password(string pPassword)
        {
            string password = "clave";

            if (password == pPassword)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        static void showHistorial()
        {
            if (historialMaquina != "")
            {
                Console.WriteLine("-----------------HISTORIAL DE VENTAS-----------------");
                Console.WriteLine();
                Console.WriteLine(historialMaquina);
                Console.WriteLine("Total Recaudado " + totalHistorialMaquina);
            }
            else
            {
                Console.WriteLine("No existen ventas registradas en la maquina");
                Console.WriteLine();
            }
        }

        static void matrizAverage(int[,] pMatriz)
        {
            int cantElements = pMatriz.GetLength(0) * pMatriz.GetLength(1), sumElements = 0;
            double average = 0;

            for (int i = 0; i < pMatriz.GetLength(0); i++)
            {
                for (int j = 0; j < pMatriz.GetLength(1); j++)
                {
                    sumElements += pMatriz[i, j];
                }
            }

            average = (sumElements / cantElements);

            Console.WriteLine("El promedio de la matriz es {0}", average);
        }

        //filas y columnas
        //VERSION A
        static void sumDiagonalInversaA(int[,] pMatriz)
        {
            int sumDiagonalInversa = 0, k = pMatriz.GetLength(0) - 1;

            for (int i = 0; i < pMatriz.GetLength(0); i++)
            {
                for (int j = pMatriz.GetLength(1); j >= 0; j--)
                {
                    if (k == j)
                    {
                        sumDiagonalInversa += pMatriz[i, j];
                    }
                }
                k--;
            }

            Console.WriteLine("La suma de la diagonal inversa de la matriz es {0}", sumDiagonalInversa);
        }

        //VERSION B
        static void sumDiagonalInversaB(int[,] pMatriz)
        {
            int sumDiagonalInversa = 0, j = 0;

            for (int i = pMatriz.GetLength(0) - 1; i >= 0; i--)
            {
                sumDiagonalInversa += pMatriz[i, j++];
            }

            Console.WriteLine("La suma de la diagonal inversa de la matriz es {0}", sumDiagonalInversa);
        }

        //VERSION C
        static void sumDiagonalInversaC(int[,] pMatriz)
        {
            int sumDiagonalInversa = 0, i = 0;

            for (int j = pMatriz.GetLength(1) - 1; j >= 0; j--)
            {
                pMatriz[i++, j] = 1;
            }

            Console.WriteLine("La suma de la diagonal inversa de la matriz es {0}", sumDiagonalInversa);
        }

        //VERSION D(SIN CICLO FOR)
        static void sumDiagonalInversaD(int[,] pMatriz)
        {
            int sumDiagonalInversa = 0, j = pMatriz.GetLength(1) - 1, i = 0;

            while (j >= 0)
            {
                sumDiagonalInversa += pMatriz[i++, j--];
            }

            Console.WriteLine("La suma de la diagonal inversa de la matriz es {0}", sumDiagonalInversa);
        }

        static void sumDiagonal(int[,] pMatriz)
        {
            int sumDiagonal = 0;

            for (int i = 0; i < pMatriz.GetLength(0); i++)
            {
                for (int j = 0; j < pMatriz.GetLength(1); j++)
                {
                    if (i == j)
                    {
                        sumDiagonal += pMatriz[i, j];
                    }
                }
            }
            Console.WriteLine("La suma en diagonal de la matriz es {0}", sumDiagonal);
        }

        static void sumRow(int[,] pMatriz, int pRow)
        {
            int sumRow = 0;

            if (pRow < (pMatriz.GetLength(1)))
            {
                for (int i = 0; i < pMatriz.GetLength(1); i++)
                {
                    sumRow += pMatriz[pRow, i];
                }

                Console.WriteLine("El resultado de la suma de la fila {0} es {1}", pRow, sumRow);
            }
            else
            {
                Console.WriteLine("La fila digitada no existe,debe seleccionar una fila existente!!");
            }
        }

        static void sumCol(int[,] pMatriz, int pColum)
        {
            int sumCol = 0;

            if (pColum < (pMatriz.GetLength(0)))
            {
                for (int j = 0; j < pMatriz.GetLength(0); j++)
                {
                    sumCol += pMatriz[j, pColum];
                }

                Console.WriteLine("El resultado de la suma de la columna {0} es {1}", pColum, sumCol);
            }
            else
            {
                Console.WriteLine("La columna no existe,debe seleccionar una columna existente!!");
            }
        }

        static int[,] fillMatriz(int filas, int columnas)
        {
            int cantElements = 1, element = 0;
            bool convertion = false;
            int[,] matriz = new int[filas, columnas];

            for (int i = 0; i < filas; i++)
            {
                for (int j = 0; j < columnas; j++)
                {
                    do
                    {
                        Console.WriteLine("Digite el elemento {0}", cantElements);

                        if (int.TryParse(Console.ReadLine(), out element))
                        {
                            matriz[i, j] = element;
                            convertion = true;
                            cantElements++;
                        }
                        else
                        {
                            Console.WriteLine("El elemento debe de ser de tipo numerico entero");
                            convertion = false;
                        }
                    } while (!convertion);
                }
            }

            return matriz;
        }

        static void showMatriz(int[,] pMatriz)
        {
            Console.WriteLine();

            for (int i = 0; i < pMatriz.GetLength(0); i++)
            {
                for (int j = 0; j < pMatriz.GetLength(1); j++)
                {
                    Console.Write("{0}", pMatriz[i, j]);
                }
                Console.WriteLine();
            }
        }

        //SUMA DE 2 MATRICES
        static int[,] showMatrizSum(int[,] pMatriz1, int[,] pMatriz2)
        {
            int[,] matrizSum = new int[pMatriz1.GetLength(0), pMatriz1.GetLength(1)];

            for (int i = 0; i < matrizSum.GetLength(0); i++)
            {
                for (int j = 0; j < matrizSum.GetLength(1); j++)
                {
                    matrizSum[i, j] = pMatriz1[i, j] + pMatriz2[i, j];
                }
            }

            return matrizSum;
        }

        //METODO QUICK SORT(SOLO USANDO ARRAYS NORMALES)
        static int[] splitArrayAfterQuickSort(out int[] pArray1, out int[] pArray2, int[] pMainArray, int pSeparator)
        {
            int contArray1 = 0, contArray2 = 0;
            pArray1 = null;
            pArray2 = null;

            for (int i = 0; i < pSeparator; i++)
            {
                contArray1++;
            }

            pArray1 = new int[contArray1];

            for (int i = 0; i < pSeparator; i++)
            {
                pArray1[i] = pMainArray[i];
            }

            pArray1 = quickSort(pArray1);

            for (int j = pSeparator; j < pMainArray.Length - 1; j++)
            {
                contArray2++;
            }

            int cont = 0;

            pArray2 = new int[contArray2];

            for (int j = (pSeparator + 1); j < pMainArray.Length; j++)
            {
                pArray2[cont] = pMainArray[j];

                cont++;
            }

            pArray2 = quickSort(pArray2);

            int[] arrayConcated = new int[(pArray1.Length + pArray2.Length) + 1];

            for (int i = 0; i < pArray1.Length; i++)
            {
                arrayConcated[i] = pArray1[i];
            }

            cont = pArray1.Length;

            arrayConcated[cont] = pMainArray[pSeparator];

            cont += 1;

            for (int i = 0; i < pArray2.Length; i++)
            {
                arrayConcated[cont] = pArray2[i];

                cont += 1;
            }

            return arrayConcated;
        }

        //METODO QUICK SORT(SOLO USANDO ARRAYS NORMALES)
        //static int[] quickSort(int[] pArray, out int pSeparator)
        //{
        //    int tempI = 0, tempJ = 0, pivot = 0, elementPivot = 0, j = pArray.Length - 1, i = 0;
        //    double p = ((pArray.Length - 1) / 2);
        //    bool applyExI = false, applyExJ = false;

        //    p = Math.Round(p);
        //    pivot = (int)p;
        //    elementPivot = pArray[pivot];

        //    do
        //    {
        //        if (!(pArray[i] < elementPivot))
        //        {
        //            tempI = pArray[i];
        //            applyExI = true;
        //        }
        //        else
        //        {
        //            applyExI = false;
        //            i++;
        //        }

        //        if (j >= pivot)
        //        {
        //            if (!(pArray[j] > elementPivot))
        //            {
        //                tempJ = pArray[j];
        //                applyExJ = true;
        //            }
        //            else
        //            {
        //                applyExJ = false;
        //                j--;
        //            }
        //        }

        //        if ((applyExJ == true) && (applyExI == true))
        //        {
        //            pArray[j] = tempI;
        //            pArray[i] = tempJ;
        //        }

        //    } while (i != j);

        //    pSeparator = i;

        //    return pArray;
        //}

        static int[] quickSort(int[] pArray)
        {
            int tempI = 0, tempJ = 0, pivot = 0, elementPivot = 0, j = pArray.Length - 1, i = 0;
            double p = ((pArray.Length - 1) / 2);
            bool applyExI = false, applyExJ = false;

            p = Math.Round(p);
            pivot = (int)p;

            if (pArray.Length > 1)
            {
                elementPivot = pArray[pivot];

                for (i = 1; i <= j; i++)
                {
                    if (!(pArray[i - 1] < elementPivot))
                    {
                        tempI = pArray[i - 1];
                        applyExI = true;
                        i--;
                    }
                    else
                    {
                        applyExI = false;
                    }

                    if (j >= pivot)
                    {
                        if (!(pArray[j] > elementPivot))
                        {
                            tempJ = pArray[j];
                            applyExJ = true;
                        }
                        else
                        {
                            applyExJ = false;
                            j--;
                        }
                    }

                    if ((applyExJ == true) && (applyExI == true))
                    {
                        pArray[j] = tempI;
                        pArray[i] = tempJ;
                    }

                }
            }

            return pArray;
        }

        //METODO BURBUJA CON WHILE
        static int[] bubbleMethod(int[] pArray)
        {
            int temp = 0, temp1 = 0, temp2 = 0, longitud = pArray.Length - 1, i = 0;

            while (i <= longitud)
            {
                temp1 = pArray[i];

                temp2 = pArray[i + 1];

                if (temp1 >= temp2)
                {
                    temp = pArray[i];

                    pArray[i] = pArray[i + 1];

                    pArray[i + 1] = temp;
                }

                if (i == (longitud - 1))
                {
                    i = 0;
                    longitud--;
                }
                else
                {
                    i++;
                }
            }
            return pArray;
        }

        //METODO BURBUJA CON MATRIZ
        static int[] bubbleMethod2(int[] pArray)
        {
            int firstElement = 0, secondElment = 0, temp = 0, longitud = pArray.Length - 1;

            for (int i = 0; i < longitud; i++)
            {
                for (int j = 0; j < longitud; j++)
                {
                    firstElement = pArray[j];

                    secondElment = pArray[j + 1];

                    if (firstElement >= secondElment)
                    {
                        temp = firstElement;

                        pArray[j] = pArray[j + 1];

                        pArray[j + 1] = temp;
                    }
                }
            }

            return pArray;
        }

        //METODO BURBUJA CON ARREGLO UNIDEMENSIONAL+WHILE
        static int[] bubbleMethod3(int[] pArray)
        {
            int firstElement = 0, secondElment = 0, longitud = pArray.Length - 1;
            bool flag = true;

            while (flag)
            {
                for (int i = 0; i < longitud; i++)
                {
                    firstElement = pArray[i];

                    secondElment = pArray[i + 1];

                    if (firstElement >= secondElment)
                    {
                        pArray[i] = secondElment;

                        pArray[i + 1] = firstElement;
                    }
                }

                longitud--;

                if (longitud == 0)
                {
                    flag = false;
                }
            }

            return pArray;
        }

        //METODO BURBUJA CON UN SOLO ARREGLO UNIDEMENSIONAL
        static int[] bubbleMethod4(int[] pArray)
        {
            int logitud = pArray.Length - 1, firstElement = 0, secondElement = 0, temp = 0;

            for (int i = 1; i <= logitud; i++)
            {
                firstElement = pArray[i - 1];
                secondElement = pArray[i];

                if (firstElement > secondElement)
                {
                    temp = firstElement;
                    pArray[i - 1] = secondElement;
                    pArray[i] = temp;
                }

                if (i == logitud)
                {
                    logitud--;
                    i = 0;
                }
            }
            return pArray;
        }

        //METODO BURBUJA CON UN SOLO ARREGLO UNIDEMENSIONAL *CASO ESPECIAL=>EL AREGLO ESTA ORDENADO DE MENOR A MAYOR
        static int[] bubbleMethod5(int[] pArray)
        {
            int logitud = pArray.Length - 1, temp = 0;

            for (int i = 0; i < logitud; i++)
            {
                if (pArray[i] <= pArray[logitud])
                {
                    temp = pArray[i];

                    pArray[i] = pArray[logitud];

                    pArray[logitud] = temp;

                    logitud--;
                }
            }

            return pArray;
        }

        //SOLUCION MAESTRO
        static int[] bubbleMethod6(int[] n)
        {
            int temp, t;
            t = n.Length;

            for (int i = 1; i < t; i++)
            {
                for (int j = t - 1; j >= i; j--)
                {
                    if (n[j] < n[j - 1])
                    {
                        temp = n[j];
                        n[j] = n[j - 1];
                        n[j - 1] = temp;
                    }
                }
            }
            return n;
        }

        static void fillArray(string[] pArray)
        {
            for (int i = 0; i <= pArray.Length - 1; i++)
            {
                Console.WriteLine("Digite el elemento {0} ", i);

                pArray[i] = Console.ReadLine();
            }
            Console.ReadKey();
        }

        static double sumValArray()
        {
            double sum = 0;

            for (int i = 0; i <= arrayNum.Length - 1; i++)
            {
                sum += arrayNum[i];
            }

            return sum;
        }

        static bool rellenarArrayAleatoriamente(int pNumA1, int pNumA2)
        {
            bool val = true;

            Random ram = new Random();

            if ((pNumA1 >= 0) && (pNumA2 <= 9))
            {
                if (pNumA1 < pNumA2)
                {
                    for (int i = 0; i <= arrayNum.Length - 1; i++)
                    {
                        arrayNum[i] = ram.Next(pNumA1, pNumA2);
                    }
                }
                else
                {
                    Console.WriteLine("El segundo numero no puede ser mayor al primer numero");
                    val = false;
                }
            }
            else
            {
                Console.WriteLine("El numero digitado debe de estar entre 0 y 9");
                val = false;
            }

            return val;
        }

        static void rellenarArray()
        {
            string inputElemento = "";

            for (int i = 0; i <= arreglo.Length - 1; i++)
            {
                Console.WriteLine("Digite la posicion {0} del arreglo", i);
                inputElemento = Console.ReadLine();
                arreglo[i] = inputElemento;
            }
        }

        static void mostrarArregloAlfa(string[] pArray)
        {
            Console.WriteLine("---CONTENIDO DEL ARREGLO---");
            Console.WriteLine("");

            for (int i = 0; i <= pArray.Length - 1; i++)
            {
                Console.WriteLine("Posicion {0} Elmento => {1}", i, pArray[i]);
            }
        }

        static void mostrarArregloNum(int[] pArray)
        {
            Console.WriteLine("---CONTENIDO DEL ARREGLO---");

            for (int i = 0; i <= pArray.Length - 1; i++)
            {
                Console.WriteLine("Posicion {0} Elmento => {1}", i, pArray[i]);
            }
        }
    }
}
